{"version":3,"sources":["components/ui/PageTitle.tsx","components/ui/PageCopyright.tsx","hooks/useLocales.ts","layouts/Detault.layout.tsx","components/ui/PageModal.tsx","hooks/useAppDispatch.ts","config/Config.ts","store/weather/weatherReducer.ts","components/weather-app/WeatherAppCitySearch.tsx","components/weather-app/WeatherAppCity.tsx","hooks/useAppSelector.ts","api/openWeather/OpenWeatherApi.ts","hooks/useOpenWeatherApi.ts","components/weather-app/WeatherAppWeatherIcon.tsx","components/ui/PageSpinner.tsx","components/weather-app/WeatherAppInfoCards.tsx","components/weather-app/WeatherAppCurrentWeatherData.tsx","components/weather-app/WeatherAppHourlyWeatherData.tsx","components/ui/PageSeparator.tsx","views/Home.view.tsx","localization/Locales.ts","localization/messages.en.ts","App.tsx","hooks/useLocalizationContext.ts","store/store.ts","index.tsx"],"names":["PageTitle","title","info","subTitle","className","PageCopyright","author","year","moment","useLocales","useContext","LocalizationContext","DefaultLayout","children","locales","appTitlePre","appTitle","appSubTitle","PageModal","show","setShow","closeModal","modalShowClasses","onClick","useAppDispatch","useDispatch","defaultLocaleKey","process","initialState","currentWeatherData","hourlyWeatherData","cityName","loading","weatherReducer","createSlice","name","reducers","setCurrentWeatherData","state","action","payload","setHourlyWeatherData","setCityName","setLoading","actions","WeatherAppCitySearch","dispatch","useState","showSearchModal","setShowSearchModal","searchInputRef","useRef","updateWeatherCity","value","current","ref","onKeyDown","e","key","placeholder","enterCityName","search","WeatherAppCity","localizationDescription","useAppSelector","useSelector","OpenWeatherApi","apiUrl","apiKey","this","url","axios","get","icon","useOpenWeatherApi","WeatherAppWeatherIcon","size","openWeatherApi","alt","src","generateIconImageUrl","width","height","PageSpinner","WeatherAppInfoCards","cardsData","map","cardData","index","style","minWidth","WeatherAppCurrentWeatherData","weather","main","Math","floor","temp","wind","speed","toString","kmph","humidity","visibility","feelsLike","feels_like","noCurrentWeatherDataForCity","WeatherAppHourlyWeatherData","list","weatherData","weatherDate","dt","utc","format","noHourlyWeatherDataForCity","PageSeparator","HomeView","dateString","timezone","hoursAfterUtc","duration","hours","localizationDate","Locales","en","React","createContext","setLocales","App","localizationContextValue","useLocalizationContext","updateWeatherDataForCityName","a","getCurrentWeatherForCityName","resCurrent","data","getHourlyWeatherForCityName","resHourly","useEffect","Provider","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b3b8650b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ninterface Props {\r\n    title: string | JSX.Element;\r\n    info?: string | JSX.Element;\r\n    subTitle?: string | JSX.Element;\r\n}\r\n\r\nexport const PageTitle: React.FC<Props> = ({\r\n    title,\r\n    info,\r\n    subTitle,\r\n}): JSX.Element => {\r\n    return <div className=\"page-title p-xl-5 p-lg-4 p-3\">\r\n        {info && <h3 className=\"opacity-75 mb-0\">{info}</h3>}\r\n        <h1 className=\"display-4 fw-bold\">{title}</h1>\r\n        {subTitle && <p className=\"opacity-75\">{subTitle}</p>}\r\n    </div>;\r\n};","import React from 'react';\r\nimport moment from 'moment';\r\n\r\ninterface Props {\r\n    author: string;\r\n}\r\n\r\nexport const PageCopyright: React.FC<Props> = ({author}): JSX.Element => {\r\n\r\n    const year = moment().year();\r\n\r\n    return <p className=\"page-copyright text-center p-xl-5 p-3\">\r\n        &copy; {year} {author}\r\n    </p>;\r\n};\r\n","import {useContext} from 'react';\r\nimport {LocalizationContext} from '../App';\r\nimport {LocalizationContextType} from '../types/LocalizationContextType';\r\n\r\nexport const useLocales = (): LocalizationContextType => useContext<LocalizationContextType>(LocalizationContext);","import React from 'react';\r\nimport {PageTitle} from '../components/ui/PageTitle';\r\nimport {PageCopyright} from '../components/ui/PageCopyright';\r\nimport {author} from '../../package.json';\r\nimport {useLocales} from '../hooks/useLocales';\r\n\r\nexport const DefaultLayout: React.FC<{}> = ({children}): JSX.Element => {\r\n\r\n    const {locales} = useLocales();\r\n\r\n    return <>\r\n        <PageTitle info={locales.appTitlePre}\r\n                   title={locales.appTitle}\r\n                   subTitle={locales.appSubTitle}/>\r\n        <div className=\"default-layout\">\r\n            <div className=\"default-layout-container p-4 shadow-lg\">\r\n                {children}\r\n            </div>\r\n        </div>\r\n        <PageCopyright author={author}/>\r\n    </>;\r\n};","import React from 'react';\r\n\r\ninterface Props {\r\n    show: boolean;\r\n    setShow: (state: boolean) => void;\r\n}\r\n\r\nexport const PageModal: React.FC<Props> = ({\r\n    show,\r\n    setShow,\r\n    children,\r\n}): JSX.Element => {\r\n\r\n    const closeModal = (): void => {\r\n        setShow(false);\r\n    };\r\n\r\n    const modalShowClasses = (): string => {\r\n        if (show) return ' show';\r\n        return ' hide';\r\n    };\r\n\r\n    return <>\r\n        <div className={'modal align-items-center d-flex justify-content-center' + modalShowClasses()}>\r\n            <div className={'modal-body' + modalShowClasses()}>\r\n                {children}\r\n            </div>\r\n\r\n            <div className=\"modal-close position-fixed cursor-pointer display-5 top-0 end-0 m-5\" onClick={closeModal}>\r\n                <i className=\"bx bx-x\"/>\r\n            </div>\r\n        </div>\r\n        <div className={'modal-backdrop' + modalShowClasses()}\r\n             onClick={closeModal}>\r\n        </div>\r\n    </>;\r\n};","import {useDispatch} from 'react-redux';\r\nimport {AppDispatch} from '../store/store';\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();","import {Locales} from '../localization/Locales';\r\n\r\nexport const defaultLocaleKey = process.env.REACT_APP_DEFAULT_LOCALE as keyof typeof Locales;\r\nexport const openWeatherApiUrl = process.env.REACT_APP_OPEN_WEATHER_API_URL as string;\r\nexport const openWeatherIconUrl = process.env.REACT_APP_OPEN_WEATHER_ICON_URL as string;\r\nexport const openWeatherApiKey = process.env.REACT_APP_OPEN_WEATHER_API_KEY as string;\r\nexport const openWeatherDefaultCity = process.env.REACT_APP_DEFAULT_CITY as string;","import {createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {CurrentWeatherForCityResponseType} from '../../api/openWeather/types/CurrentWeatherForCityResponseType';\r\nimport {openWeatherDefaultCity} from '../../config/Config';\r\nimport {HourlyWeatherForCityResponseType} from '../../api/openWeather/types/HourlyWeatherForCityResponseType';\r\n\r\ntype InitialStateType = {\r\n    currentWeatherData: CurrentWeatherForCityResponseType | null,\r\n    hourlyWeatherData: HourlyWeatherForCityResponseType | null,\r\n    cityName: string;\r\n    loading: boolean;\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    currentWeatherData: null,\r\n    hourlyWeatherData: null,\r\n    cityName: openWeatherDefaultCity,\r\n    loading: false,\r\n};\r\n\r\nexport const weatherReducer = createSlice({\r\n    name: 'weather',\r\n    initialState,\r\n    reducers: {\r\n        setCurrentWeatherData(state,\r\n            action: PayloadAction<CurrentWeatherForCityResponseType | null>) {\r\n            state.currentWeatherData = action.payload;\r\n        },\r\n        setHourlyWeatherData(state,\r\n            action: PayloadAction<HourlyWeatherForCityResponseType | null>) {\r\n            state.hourlyWeatherData = action.payload;\r\n        },\r\n        setCityName(state,\r\n            action: PayloadAction<string>) {\r\n            state.cityName = action.payload;\r\n        },\r\n        setLoading(state,\r\n            action: PayloadAction<boolean>) {\r\n            state.loading = action.payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {setCurrentWeatherData, setHourlyWeatherData, setCityName, setLoading} = weatherReducer.actions;\r\nexport default weatherReducer.reducer;","import React, {useRef, useState} from 'react';\r\nimport {PageModal} from '../ui/PageModal';\r\nimport {useLocales} from '../../hooks/useLocales';\r\nimport {useAppDispatch} from '../../hooks/useAppDispatch';\r\nimport {setCityName} from '../../store/weather/weatherReducer';\r\n\r\nexport const WeatherAppCitySearch: React.FC = (): JSX.Element => {\r\n\r\n    const dispatch = useAppDispatch();\r\n    const {locales} = useLocales();\r\n\r\n    const [showSearchModal, setShowSearchModal] = useState<boolean>(false);\r\n    const searchInputRef = useRef<HTMLInputElement>(null);\r\n\r\n    const updateWeatherCity = () => {\r\n        const value = searchInputRef.current ? searchInputRef.current.value : '';\r\n        dispatch(setCityName(value));\r\n        setShowSearchModal(false);\r\n    };\r\n\r\n    return <>\r\n        <button className=\"btn btn-icon btn-lg btn-primary text-white shadow-sm rounded-circle text-nowrap\"\r\n                onClick={() => setShowSearchModal(true)}>\r\n            <i className=\"bx bx-search\"/>\r\n        </button>\r\n\r\n        <PageModal show={showSearchModal}\r\n                   setShow={setShowSearchModal}>\r\n            <div className=\"text-center\">\r\n                <input ref={searchInputRef}\r\n                       onKeyDown={e => {\r\n                           if (e.key === 'Enter') updateWeatherCity();\r\n                       }}\r\n                       className=\"search-input h6 text-center\"\r\n                       placeholder={locales.enterCityName}/>\r\n                <button onClick={updateWeatherCity}\r\n                        className=\"btn btn-lg btn-primary rounded-pill text-white d-block m-auto mt-4\">\r\n                    {locales.search}\r\n                    <i className=\"bx bx-search ms-2\"/>\r\n                </button>\r\n            </div>\r\n        </PageModal>\r\n    </>;\r\n};","import React from \"react\";\r\n\r\ninterface Props {\r\n    cityName: string;\r\n    localizationDescription: string;\r\n}\r\n\r\nexport const WeatherAppCity: React.FC<Props> = ({cityName, localizationDescription}): JSX.Element => {\r\n    return <>\r\n        <div>\r\n            <h2 className=\"mb-0 fw-bold\">\r\n                {cityName}\r\n            </h2>\r\n            <p className=\"mb-0\">\r\n                {localizationDescription}\r\n            </p>\r\n        </div>\r\n    </>;\r\n};","import {TypedUseSelectorHook, useSelector} from 'react-redux';\r\nimport {RootState} from '../store/store';\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import axios, {AxiosResponse} from 'axios';\r\nimport {defaultLocaleKey, openWeatherApiKey, openWeatherApiUrl, openWeatherIconUrl} from '../../config/Config';\r\nimport {CurrentWeatherForCityResponseType} from './types/CurrentWeatherForCityResponseType';\r\nimport {HourlyWeatherForCityResponseType} from './types/HourlyWeatherForCityResponseType';\r\n\r\nexport class OpenWeatherApi {\r\n    apiUrl: string;\r\n    apiKey: string;\r\n\r\n    constructor() {\r\n        this.apiUrl = openWeatherApiUrl;\r\n        this.apiKey = openWeatherApiKey;\r\n    }\r\n\r\n    public async getCurrentWeatherForCityName(cityName: string): Promise<AxiosResponse<CurrentWeatherForCityResponseType>> {\r\n        const url = `${this.apiUrl}weather?q=${cityName}&appid=${this.apiKey}&units=metric&lang=${defaultLocaleKey}`;\r\n        return await axios.get<CurrentWeatherForCityResponseType>(url);\r\n    }\r\n\r\n    public async getHourlyWeatherForCityName(cityName: string): Promise<AxiosResponse<HourlyWeatherForCityResponseType>> {\r\n        const url = `${this.apiUrl}forecast?q=${cityName}&appid=${this.apiKey}&units=metric&lang=${defaultLocaleKey}`;\r\n        return await axios.get<HourlyWeatherForCityResponseType>(url);\r\n    }\r\n\r\n    public generateIconImageUrl(icon: string) {\r\n        return `${openWeatherIconUrl}${icon}@4x.png`;\r\n    }\r\n}","import {OpenWeatherApi} from '../api/openWeather/OpenWeatherApi';\r\n\r\nexport const useOpenWeatherApi = () => {\r\n    return new OpenWeatherApi();\r\n};","import React from 'react';\r\nimport {useOpenWeatherApi} from '../../hooks/useOpenWeatherApi';\r\n\r\ninterface Props {\r\n    icon: string;\r\n    size?: number;\r\n}\r\n\r\nexport const WeatherAppWeatherIcon: React.FC<Props> = ({\r\n    icon,\r\n    size,\r\n}): JSX.Element => {\r\n\r\n    const openWeatherApi = useOpenWeatherApi();\r\n\r\n    return <img alt=\"Weather app - weather condition icon\"\r\n                src={openWeatherApi.generateIconImageUrl(icon)}\r\n                width={size}\r\n                height={size}/>;\r\n};","import React from 'react';\r\n\r\nexport const PageSpinner: React.FC = (): JSX.Element => {\r\n    return <>\r\n        <div className=\"spinner-border\"/>\r\n    </>;\r\n};","import React from 'react';\r\nimport {WeatherCardDataType} from '../../types/WeatherCardDataType';\r\n\r\ninterface Props {\r\n    cardsData: WeatherCardDataType[];\r\n}\r\n\r\nexport const WeatherAppInfoCards: React.FC<Props> = ({cardsData}): JSX.Element => {\r\n    return <div className=\"py-2 px-4\">\r\n        <div className=\"d-flex flex-wrap justify-content-between\">\r\n            {cardsData.map((\r\n                cardData,\r\n                index) =>\r\n                <div key={`info-card_${index}`}\r\n                     className=\"text-start\"\r\n                     style={{minWidth: '110px'}}>\r\n                    <p className=\"mb-0\">{cardData.title}</p>\r\n                    <p className=\"mb-0 fw-bold\">\r\n                        {cardData.value}\r\n                    </p>\r\n                </div>)}\r\n        </div>\r\n    </div>;\r\n};","import React from 'react';\r\nimport {WeatherAppWeatherIcon} from './WeatherAppWeatherIcon';\r\nimport {useAppSelector} from '../../hooks/useAppSelector';\r\nimport {PageSpinner} from '../ui/PageSpinner';\r\nimport {useLocales} from '../../hooks/useLocales';\r\nimport {WeatherAppInfoCards} from './WeatherAppInfoCards';\r\nimport {WeatherCardDataType} from '../../types/WeatherCardDataType';\r\n\r\nexport const WeatherAppCurrentWeatherData: React.FC = (): JSX.Element => {\r\n\r\n    const {locales} = useLocales();\r\n\r\n    const {currentWeatherData, loading} = useAppSelector(state => state.weather);\r\n\r\n    const generateCardsData = (): WeatherCardDataType[] => {\r\n        if (currentWeatherData)\r\n            return [\r\n                {title: locales.wind, value: `${currentWeatherData.wind.speed.toString()} ${locales.kmph}`},\r\n                {title: locales.humidity, value: currentWeatherData.main.humidity.toString() + '%'},\r\n                {title: locales.visibility, value: currentWeatherData.visibility + 'm'},\r\n                {title: locales.feelsLike, value: Math.floor(currentWeatherData.main.feels_like).toString() + '°C'},\r\n            ];\r\n        return [];\r\n    };\r\n\r\n    if (!currentWeatherData && !loading) return <>\r\n        <p className=\"text-center py-5\">{locales.noCurrentWeatherDataForCity}</p>\r\n    </>;\r\n    else if (loading) return <div className=\"w-100 py-5 text-center\">\r\n        <PageSpinner/>\r\n    </div>;\r\n    else if (currentWeatherData) {\r\n        return <>\r\n            <div className=\"text-center\">\r\n                <WeatherAppWeatherIcon icon={currentWeatherData.weather[0].icon}/>\r\n                <p className=\"mb-0\">\r\n                    {currentWeatherData.weather[0].main}\r\n                </p>\r\n                <h1 className=\"fw-bold display-4 mb-5\">\r\n                    {Math.floor(currentWeatherData.main.temp)}°C\r\n                </h1>\r\n                <WeatherAppInfoCards cardsData={generateCardsData()}/>\r\n            </div>\r\n        </>;\r\n    }\r\n    return <></>;\r\n};","import React from 'react';\r\nimport {useAppSelector} from '../../hooks/useAppSelector';\r\nimport {PageSpinner} from '../ui/PageSpinner';\r\nimport {useLocales} from '../../hooks/useLocales';\r\nimport {WeatherAppWeatherIcon} from './WeatherAppWeatherIcon';\r\nimport moment from 'moment';\r\n\r\nexport const WeatherAppHourlyWeatherData: React.FC = (): JSX.Element => {\r\n\r\n    const {locales} = useLocales();\r\n\r\n    const {hourlyWeatherData, loading} = useAppSelector(state => state.weather);\r\n\r\n    const parseWeatherDate = (weatherDate: number): string => {\r\n        let parsedDate = '';\r\n        parsedDate = moment(weatherDate * 1000).utc(false).format('HH:mm');\r\n        return parsedDate;\r\n    };\r\n\r\n    if (!hourlyWeatherData && !loading) return <>\r\n        <p className=\"text-center py-5\">{locales.noHourlyWeatherDataForCity}</p>\r\n    </>;\r\n    else if (loading) return <div className=\"w-100 py-5 text-center\">\r\n        <PageSpinner/>\r\n    </div>;\r\n    else if (hourlyWeatherData) return <>\r\n        <div className=\"pt-4 px-4\">\r\n            <div className=\"overflow-auto\">\r\n                <div className=\"d-flex\">\r\n                    {hourlyWeatherData.list.map((\r\n                        weatherData,\r\n                        index) =>\r\n                        <div key={`hourly-weather_${index}`}\r\n                             className=\"hourly-weather-card\">\r\n                            <p className=\"text-center mb-0\">\r\n                                {parseWeatherDate(weatherData.dt)}\r\n                            </p>\r\n                            <div className=\"w-25\">\r\n                                <WeatherAppWeatherIcon icon={weatherData.weather[0].icon}\r\n                                                       size={80}/>\r\n                            </div>\r\n                            <small className=\"d-block text-center\">\r\n                                {weatherData.weather[0].main}\r\n                            </small>\r\n                            <h5 className=\"fw-bold text-center\">\r\n                                {Math.floor(weatherData.main.temp)}°C\r\n                            </h5>\r\n                        </div>)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </>;\r\n    return <></>;\r\n};","import React from 'react';\r\n\r\ninterface Props {\r\n    className?: string;\r\n}\r\n\r\nexport const PageSeparator: React.FC<Props> = ({className}): JSX.Element => {\r\n    return <div className={'w-100 border-bottom border border-dark ' + className}/>;\r\n};","import React from 'react';\r\nimport {DefaultLayout} from '../layouts/Detault.layout';\r\nimport {WeatherAppCitySearch} from '../components/weather-app/WeatherAppCitySearch';\r\nimport {WeatherAppCity} from '../components/weather-app/WeatherAppCity';\r\nimport {useAppSelector} from '../hooks/useAppSelector';\r\nimport moment from 'moment';\r\nimport {WeatherAppCurrentWeatherData} from '../components/weather-app/WeatherAppCurrentWeatherData';\r\nimport {WeatherAppHourlyWeatherData} from '../components/weather-app/WeatherAppHourlyWeatherData';\r\nimport {PageSeparator} from '../components/ui/PageSeparator';\r\n\r\nexport const HomeView: React.FC<{}> = (): JSX.Element => {\r\n\r\n    const {currentWeatherData, cityName} = useAppSelector(state => state.weather);\r\n\r\n    const localizationDate = () => {\r\n        let dateString = '';\r\n        if (currentWeatherData) {\r\n            dateString += moment(currentWeatherData.dt * 1000 + currentWeatherData.timezone * 1000)\r\n                .utc(false)\r\n                .format('HH:mm');\r\n            const hoursAfterUtc = moment.duration(currentWeatherData.timezone * 1000).hours();\r\n            dateString += ` (GMT${currentWeatherData.timezone > 0 ? '+' : ''}${hoursAfterUtc}:00)`;\r\n        }\r\n        return dateString;\r\n    };\r\n\r\n    return <>\r\n        <DefaultLayout>\r\n            <div className=\"d-flex justify-content-between p-4\">\r\n                <WeatherAppCity cityName={currentWeatherData ? currentWeatherData.name : cityName}\r\n                                localizationDescription={localizationDate()}/>\r\n                <WeatherAppCitySearch/>\r\n            </div>\r\n            <WeatherAppCurrentWeatherData/>\r\n            <div className=\"p-4\">\r\n                <PageSeparator/>\r\n            </div>\r\n            <WeatherAppHourlyWeatherData/>\r\n        </DefaultLayout>\r\n    </>;\r\n};","import {MessagesEn} from \"./messages.en\";\r\n\r\nexport const Locales = {\r\n    en: MessagesEn\r\n}","import {LocalizationType} from '../types/LocalizationType';\r\n\r\nexport const MessagesEn: LocalizationType = {\r\n    appTitle: 'Weather app',\r\n    appTitlePre: 'Another',\r\n    appSubTitle: 'React w/TypeScript',\r\n    enterCityName: 'Enter city name',\r\n    search: 'Search',\r\n    noCurrentWeatherDataForCity: 'Cannot load current weather data for this city.',\r\n    noHourlyWeatherDataForCity: 'Cannot load hourly weather data for this city.',\r\n    humidity: 'Humidity',\r\n    visibility: 'Visibility',\r\n    feelsLike: 'Feels like',\r\n    wind: 'Wind',\r\n    kmph: 'km/h',\r\n};","import React, {useEffect} from 'react';\r\nimport {HomeView} from './views/Home.view';\r\nimport {useLocalizationContext} from './hooks/useLocalizationContext';\r\nimport {LocalizationContextType} from './types/LocalizationContextType';\r\nimport {Locales} from './localization/Locales';\r\nimport {defaultLocaleKey} from './config/Config';\r\nimport {useOpenWeatherApi} from './hooks/useOpenWeatherApi';\r\nimport {useAppDispatch} from './hooks/useAppDispatch';\r\nimport {setCurrentWeatherData, setHourlyWeatherData, setLoading} from './store/weather/weatherReducer';\r\nimport {useAppSelector} from './hooks/useAppSelector';\r\n\r\nexport const LocalizationContext = React.createContext<LocalizationContextType>({\r\n    locales: Locales[defaultLocaleKey],\r\n    setLocales: () => {\r\n    },\r\n});\r\n\r\nexport const App: React.FC = (): JSX.Element => {\r\n\r\n    const dispatch = useAppDispatch();\r\n    const localizationContextValue = useLocalizationContext();\r\n    const openWeatherApi = useOpenWeatherApi();\r\n\r\n    const cityName = useAppSelector(state => state.weather.cityName);\r\n\r\n    const updateWeatherDataForCityName = async () => {\r\n        dispatch(setLoading(true));\r\n        try {\r\n            const resCurrent = await openWeatherApi.getCurrentWeatherForCityName(cityName);\r\n            dispatch(setCurrentWeatherData(resCurrent.data));\r\n            const resHourly = await openWeatherApi.getHourlyWeatherForCityName(cityName);\r\n            dispatch(setHourlyWeatherData(resHourly.data));\r\n        } catch {\r\n            dispatch(setCurrentWeatherData(null));\r\n            dispatch(setHourlyWeatherData(null));\r\n        } finally {\r\n            dispatch(setLoading(false));\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (cityName) {\r\n            updateWeatherDataForCityName();\r\n        }\r\n    }, [cityName]);\r\n\r\n    return <>\r\n        <LocalizationContext.Provider value={localizationContextValue}>\r\n            <HomeView/>\r\n        </LocalizationContext.Provider>\r\n    </>;\r\n};","import {useState} from 'react';\r\nimport {LocalizationType} from '../types/LocalizationType';\r\nimport {Locales} from '../localization/Locales';\r\nimport {defaultLocaleKey} from '../config/Config';\r\n\r\nexport const useLocalizationContext = () => {\r\n    const [locales, setLocales] = useState<LocalizationType>(Locales[defaultLocaleKey]);\r\n    return {locales, setLocales};\r\n};","import {configureStore} from '@reduxjs/toolkit';\r\nimport weatherReducer from './weather/weatherReducer';\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        weather: weatherReducer,\r\n    },\r\n});\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {App} from './App';\r\nimport {store} from './store/store';\r\nimport {Provider} from 'react-redux';\r\n\r\n/* Global styles\r\n* */\r\nimport './scss/styles.scss';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n"],"sourceRoot":""}